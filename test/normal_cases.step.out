(2 + 3)
5
(2 - 3)
-1
(2 * 3)
6
(2 / 3)
0
(2 <= 3)
true
(3 <= 2)
false
(2.1 + 3.1)
5.2
(2.1 - 3.1)
-1.
(2.1 * 3.1)
6.51
(4.2 / 2.1)
2.
(2.1 <= 3.1)
true
(3.1 <= 2.1)
false
(2 + 3.1)
5.1
(2.1 - 3)
-0.9
(2 * 3.1)
6.2
(2.1 / 3)
0.7
(2 <= 3.1)
true
(3.1 <= 2)
false
((2 + ((3 * 4) / 1)) <= 5)
((2 + (12 / 1)) <= 5)
((2 + 12) <= 5)
(14 <= 5)
false
true
false
(if true then 3 else 4)
3
(if (4.6 <= 3) then (if (2 <= 0.9) then 2. else 1.) else 124.9)
(if false then (if (2 <= 0.9) then 2. else 1.) else 124.9)
124.9
(if (let x : int = 5 in (x <= 10)) then 2 else 3)
(if (5 <= 10) then 2 else 3)
(if true then 2 else 3)
2
(0 / 0)
NaN
(0 / 0.)
NaN
(0. / 0)
NaN
(0. / 0.)
NaN
(4 + (0 - (5 * 2)))
(4 + (0 - 10))
(4 + -10)
-6
(let x : int = (2 + 3) in (x <= 10))
(let x : int = 5 in (x <= 10))
(5 <= 10)
true
(let y : int = 10 in (let y : int = 1 in (y + y)))
(let y : int = 1 in (y + y))
(1 + 1)
2
(fun (x:int) : int -> ((x * 2) + 1))
((fun (y:bool) : int -> (if y then 1 else 0)) (false))
(if false then 1 else 0)
0
((fun (f:(int -> int)) : int -> (f (10))) ((fun (var:int) : int -> (var - 1))))
((fun (var:int) : int -> (var - 1)) (10))
(10 - 1)
9
(let f1 : (int -> int) = (fun (x:int) : int -> (x + 1)) in (let f2 : (int -> int) = (fun (x:int) : int -> (x - 1)) in ((f1 (5)) <= (f2 (5)))))
(let f2 : (int -> int) = (fun (x:int) : int -> (x - 1)) in (((fun (x:int) : int -> (x + 1)) (5)) <= (f2 (5))))
(((fun (x:int) : int -> (x + 1)) (5)) <= ((fun (x:int) : int -> (x - 1)) (5)))
((5 + 1) <= ((fun (x:int) : int -> (x - 1)) (5)))
(6 <= ((fun (x:int) : int -> (x - 1)) (5)))
(6 <= (5 - 1))
(6 <= 4)
false
(((fun (x:int) : (float -> float) -> (fun (y:float) : float -> (x / y))) (8)) (2.))
((fun (y:float) : float -> (8 / y)) (2.))
(8 / 2.)
4.
((fun (x:int) : (float -> float) -> (fun (y:float) : float -> (x / y))) (8))
(fun (y:float) : float -> (8 / y))
(let max2 : (int -> (int -> int)) = (fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) in (let a : int = 5 in (let b : int = 2 in ((max2 (a)) (b)))))
(let a : int = 5 in (let b : int = 2 in (((fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) (a)) (b))))
(let b : int = 2 in (((fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) (5)) (b)))
(((fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) (5)) (2))
((fun (y:int) : int -> (if (y <= 5) then 5 else y)) (2))
(if (2 <= 5) then 5 else 2)
(if true then 5 else 2)
5
(let fact : (int -> int) = (fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) in (fact (5)))
((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (5))
(if (5 <= 0) then 1 else (5 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((5 - 1)))))
(if false then 1 else (5 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((5 - 1)))))
(5 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (4)))
(5 * (if (4 <= 0) then 1 else (4 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((4 - 1))))))
(5 * (if false then 1 else (4 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((4 - 1))))))
(5 * (4 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (3))))
(5 * (4 * (if (3 <= 0) then 1 else (3 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((3 - 1)))))))
(5 * (4 * (if false then 1 else (3 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((3 - 1)))))))
(5 * (4 * (3 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (2)))))
(5 * (4 * (3 * (if (2 <= 0) then 1 else (2 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((2 - 1))))))))
(5 * (4 * (3 * (if false then 1 else (2 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((2 - 1))))))))
(5 * (4 * (3 * (2 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (1))))))
(5 * (4 * (3 * (2 * (if (1 <= 0) then 1 else (1 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((1 - 1)))))))))
(5 * (4 * (3 * (2 * (if false then 1 else (1 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((1 - 1)))))))))
(5 * (4 * (3 * (2 * (1 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (0)))))))
(5 * (4 * (3 * (2 * (1 * (if (0 <= 0) then 1 else (0 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((0 - 1))))))))))
(5 * (4 * (3 * (2 * (1 * (if true then 1 else (0 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((0 - 1))))))))))
(5 * (4 * (3 * (2 * (1 * 1)))))
(5 * (4 * (3 * (2 * 1))))
(5 * (4 * (3 * 2)))
(5 * (4 * 6))
(5 * 24)
120
