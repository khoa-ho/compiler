=> (2 + 3)
∴  5

=> (2 - 3)
∴  -1

=> (2 * 3)
∴  6

=> (2 / 3)
∴  0

=> (2 <= 3)
∴  true

=> (3 <= 2)
∴  false

=> (2.1 + 3.1)
∴  5.2

=> (2.1 - 3.1)
∴  -1.

=> (2.1 * 3.1)
∴  6.51

=> (4.2 / 2.1)
∴  2.

=> (2.1 <= 3.1)
∴  true

=> (3.1 <= 2.1)
∴  false

=> (2 + 3.1)
∴  5.1

=> (2.1 - 3)
∴  -0.9

=> (2 * 3.1)
∴  6.2

=> (2.1 / 3)
∴  0.7

=> (2 <= 3.1)
∴  true

=> (3.1 <= 2)
∴  false

=> ((2 + ((3 * 4) / 1)) <= 5)
=> ((2 + (12 / 1)) <= 5)
=> ((2 + 12) <= 5)
=> (14 <= 5)
∴  false

∴  true

∴  false

=> (if true then 3 else 4)
∴  3

=> (if (4.6 <= 3) then (if (2 <= 0.9) then 2. else 1.) else 124.9)
=> (if false then (if (2 <= 0.9) then 2. else 1.) else 124.9)
∴  124.9

=> (if (let x : int = 5 in (x <= 10)) then 2 else 3)
=> (if (5 <= 10) then 2 else 3)
=> (if true then 2 else 3)
∴  2

=> (0 / 0)
∴  NaN

=> (0 / 0.)
∴  NaN

=> (0. / 0)
∴  NaN

=> (0. / 0.)
∴  NaN

=> (4 + ((0 - 5) * 2))
=> (4 + (-5 * 2))
=> (4 + -10)
∴  -6

=> (false && (4 < 4.1))
=> (false && true)
∴  false

=> ((9 > 10) || (9 == 9))
=> (false || (9 == 9))
=> (false || true)
∴  true

=> (not (true && false))
=> (not false)
∴  true

=> (let x : int = (2 + 3) in (x <= 10))
=> (let x : int = 5 in (x <= 10))
=> (5 <= 10)
∴  true

=> (let y : int = 10 in (let y : int = 1 in (y + y)))
=> (let y : int = 1 in (y + y))
=> (1 + 1)
∴  2

∴  (fun (x:int) : int -> ((x * 2) + 1))

=> ((fun (y:bool) : int -> (if y then 1 else 0)) (false))
=> (if false then 1 else 0)
∴  0

=> ((fun (f:(int -> int)) : int -> (f (10))) ((fun (var:int) : int -> (var - 1))))
=> ((fun (var:int) : int -> (var - 1)) (10))
=> (10 - 1)
∴  9

=> (let f1 : (int -> int) = (fun (x:int) : int -> (x + 1)) in (let f2 : (int -> int) = (fun (x:int) : int -> (x - 1)) in ((f1 (5)) <= (f2 (5)))))
=> (let f2 : (int -> int) = (fun (x:int) : int -> (x - 1)) in (((fun (x:int) : int -> (x + 1)) (5)) <= (f2 (5))))
=> (((fun (x:int) : int -> (x + 1)) (5)) <= ((fun (x:int) : int -> (x - 1)) (5)))
=> ((5 + 1) <= ((fun (x:int) : int -> (x - 1)) (5)))
=> (6 <= ((fun (x:int) : int -> (x - 1)) (5)))
=> (6 <= (5 - 1))
=> (6 <= 4)
∴  false

=> (((fun (x:int) : (float -> float) -> (fun (y:float) : float -> (x / y))) (8)) (2.))
=> ((fun (y:float) : float -> (8 / y)) (2.))
=> (8 / 2.)
∴  4.

=> ((fun (x:int) : (float -> float) -> (fun (y:float) : float -> (x / y))) (8))
∴  (fun (y:float) : float -> (8 / y))

=> (let max2 : (int -> (int -> int)) = (fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) in (let a : int = 5 in (let b : int = 2 in ((max2 (a)) (b)))))
=> (let a : int = 5 in (let b : int = 2 in (((fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) (a)) (b))))
=> (let b : int = 2 in (((fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) (5)) (b)))
=> (((fun (x:int) : (int -> int) -> (fun (y:int) : int -> (if (y <= x) then x else y))) (5)) (2))
=> ((fun (y:int) : int -> (if (y <= 5) then 5 else y)) (2))
=> (if (2 <= 5) then 5 else 2)
=> (if true then 5 else 2)
∴  5

=> (let fact : (int -> int) = (fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) in (fact (5)))
=> ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (5))
=> (if (5 <= 0) then 1 else (5 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((5 - 1)))))
=> (if false then 1 else (5 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((5 - 1)))))
=> (5 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (4)))
=> (5 * (if (4 <= 0) then 1 else (4 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((4 - 1))))))
=> (5 * (if false then 1 else (4 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((4 - 1))))))
=> (5 * (4 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (3))))
=> (5 * (4 * (if (3 <= 0) then 1 else (3 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((3 - 1)))))))
=> (5 * (4 * (if false then 1 else (3 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((3 - 1)))))))
=> (5 * (4 * (3 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (2)))))
=> (5 * (4 * (3 * (if (2 <= 0) then 1 else (2 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((2 - 1))))))))
=> (5 * (4 * (3 * (if false then 1 else (2 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((2 - 1))))))))
=> (5 * (4 * (3 * (2 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (1))))))
=> (5 * (4 * (3 * (2 * (if (1 <= 0) then 1 else (1 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((1 - 1)))))))))
=> (5 * (4 * (3 * (2 * (if false then 1 else (1 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((1 - 1)))))))))
=> (5 * (4 * (3 * (2 * (1 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) (0)))))))
=> (5 * (4 * (3 * (2 * (1 * (if (0 <= 0) then 1 else (0 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((0 - 1))))))))))
=> (5 * (4 * (3 * (2 * (1 * (if true then 1 else (0 * ((fix f (n:int) : int -> (if (n <= 0) then 1 else (n * (f ((n - 1)))))) ((0 - 1))))))))))
=> (5 * (4 * (3 * (2 * (1 * 1)))))
=> (5 * (4 * (3 * (2 * 1))))
=> (5 * (4 * (3 * 2)))
=> (5 * (4 * 6))
=> (5 * 24)
∴  120

∴  ()

∴  (5, true)

=> ((let x : bool = (true && (4 > 5)) in x), (fun (x:float) : float -> (x / 2.)))
=> ((let x : bool = (true && false) in x), (fun (x:float) : float -> (x / 2.)))
=> ((let x : bool = false in x), (fun (x:float) : float -> (x / 2.)))
∴  (false, (fun (x:float) : float -> (x / 2.)))

=> (fst (5, true))
∴  5

=> (snd (5, true))
∴  true

=> ((fst ((fun (x:int) : int -> (x + 1)), (fun (y:int) : int -> (y - 1)))) (3))
=> ((fun (x:int) : int -> (x + 1)) (3))
=> (3 + 1)
∴  4

=> ((snd ((fun (x:int) : int -> (x + 1)), (fun (y:int) : int -> (y - 1)))) (3))
=> ((fun (y:int) : int -> (y - 1)) (3))
=> (3 - 1)
∴  2

∴  (fun (x:bool) : (int * int) -> (if (x || (5.6 < 10)) then (0, (0 + 1)) else (9, 9)))

=> ((fun (x:bool) : (int * int) -> (if (x || (5.6 < 10)) then (0, (0 + 1)) else (9, 9))) ((true && false)))
=> ((fun (x:bool) : (int * int) -> (if (x || (5.6 < 10)) then (0, (0 + 1)) else (9, 9))) (false))
=> (if (false || (5.6 < 10)) then (0, (0 + 1)) else (9, 9))
=> (if (false || true) then (0, (0 + 1)) else (9, 9))
=> (if true then (0, (0 + 1)) else (9, 9))
∴  (0, 1)

=> (hd (6 :: (5 :: [] : int)))
∴  6

=> (tl (6 :: (5 :: [] : int)))
∴  (5 :: [] : int)

=> (let x : int = 2 in (6 :: (x :: [] : int)))
∴  (6 :: (2 :: [] : int))

=> (empty (true :: (false :: ((4 < 5) :: [] : bool))))
∴  false

=> (empty [] : float)
∴  true

=> (let max : (int -> ([int] -> int)) = (fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) in ((max (0)) ((4 :: (7 :: (2 :: (1 :: [] : int)))))))
=> (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((4 :: (7 :: (2 :: (1 :: [] : int))))))
=> ((fun (l:[int]) : int -> (if (empty l) then 0 else (let cur : int = (hd l) in (if (cur > 0) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((tl l))))))) ((4 :: (7 :: (2 :: (1 :: [] : int))))))
=> (if (empty (4 :: (7 :: (2 :: (1 :: [] : int))))) then 0 else (let cur : int = (hd (4 :: (7 :: (2 :: (1 :: [] : int))))) in (if (cur > 0) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))))))
=> (if false then 0 else (let cur : int = (hd (4 :: (7 :: (2 :: (1 :: [] : int))))) in (if (cur > 0) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))))))
=> (let cur : int = 4 in (if (cur > 0) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int)))))))))
=> (if (4 > 0) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))))
=> (if true then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (0)) ((tl (4 :: (7 :: (2 :: (1 :: [] : int))))))))
=> ((fun (l:[int]) : int -> (if (empty l) then 4 else (let cur : int = (hd l) in (if (cur > 4) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl l))))))) ((tl (4 :: (7 :: (2 :: (1 :: [] : int)))))))
=> ((fun (l:[int]) : int -> (if (empty l) then 4 else (let cur : int = (hd l) in (if (cur > 4) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl l))))))) ((7 :: (2 :: (1 :: [] : int)))))
=> (if (empty (7 :: (2 :: (1 :: [] : int)))) then 4 else (let cur : int = (hd (7 :: (2 :: (1 :: [] : int)))) in (if (cur > 4) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (7 :: (2 :: (1 :: [] : int)))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (7 :: (2 :: (1 :: [] : int)))))))))
=> (if false then 4 else (let cur : int = (hd (7 :: (2 :: (1 :: [] : int)))) in (if (cur > 4) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (7 :: (2 :: (1 :: [] : int)))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (7 :: (2 :: (1 :: [] : int)))))))))
=> (let cur : int = 7 in (if (cur > 4) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (7 :: (2 :: (1 :: [] : int)))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (7 :: (2 :: (1 :: [] : int))))))))
=> (if (7 > 4) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (7 :: (2 :: (1 :: [] : int)))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (7 :: (2 :: (1 :: [] : int)))))))
=> (if true then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (7 :: (2 :: (1 :: [] : int)))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (4)) ((tl (7 :: (2 :: (1 :: [] : int)))))))
=> ((fun (l:[int]) : int -> (if (empty l) then 7 else (let cur : int = (hd l) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl l))))))) ((tl (7 :: (2 :: (1 :: [] : int))))))
=> ((fun (l:[int]) : int -> (if (empty l) then 7 else (let cur : int = (hd l) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl l))))))) ((2 :: (1 :: [] : int))))
=> (if (empty (2 :: (1 :: [] : int))) then 7 else (let cur : int = (hd (2 :: (1 :: [] : int))) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (2 :: (1 :: [] : int))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (2 :: (1 :: [] : int))))))))
=> (if false then 7 else (let cur : int = (hd (2 :: (1 :: [] : int))) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (2 :: (1 :: [] : int))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (2 :: (1 :: [] : int))))))))
=> (let cur : int = 2 in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (2 :: (1 :: [] : int))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (2 :: (1 :: [] : int)))))))
=> (if (2 > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (2)) ((tl (2 :: (1 :: [] : int))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (2 :: (1 :: [] : int))))))
=> (if false then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (2)) ((tl (2 :: (1 :: [] : int))))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (2 :: (1 :: [] : int))))))
=> ((fun (l:[int]) : int -> (if (empty l) then 7 else (let cur : int = (hd l) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl l))))))) ((tl (2 :: (1 :: [] : int)))))
=> ((fun (l:[int]) : int -> (if (empty l) then 7 else (let cur : int = (hd l) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl l))))))) ((1 :: [] : int)))
=> (if (empty (1 :: [] : int)) then 7 else (let cur : int = (hd (1 :: [] : int)) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (1 :: [] : int)))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (1 :: [] : int)))))))
=> (if false then 7 else (let cur : int = (hd (1 :: [] : int)) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (1 :: [] : int)))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (1 :: [] : int)))))))
=> (let cur : int = 1 in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl (1 :: [] : int)))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (1 :: [] : int))))))
=> (if (1 > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (1)) ((tl (1 :: [] : int)))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (1 :: [] : int)))))
=> (if false then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (1)) ((tl (1 :: [] : int)))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl (1 :: [] : int)))))
=> ((fun (l:[int]) : int -> (if (empty l) then 7 else (let cur : int = (hd l) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl l))))))) ((tl (1 :: [] : int))))
=> ((fun (l:[int]) : int -> (if (empty l) then 7 else (let cur : int = (hd l) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl l))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl l))))))) ([] : int))
=> (if (empty [] : int) then 7 else (let cur : int = (hd [] : int) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl [] : int))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl [] : int))))))
=> (if true then 7 else (let cur : int = (hd [] : int) in (if (cur > 7) then (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (cur)) ((tl [] : int))) else (((fix f (cur_max:int) : ([int] -> int) -> (fun (l:[int]) : int -> (if (empty l) then cur_max else (let cur : int = (hd l) in (if (cur > cur_max) then ((f (cur)) ((tl l))) else ((f (cur_max)) ((tl l)))))))) (7)) ((tl [] : int))))))
∴  7

=> (ref 6)
∴  Ptr(0):{6}

=> (!(ref 3))
=> (!Ptr(1):{3})
∴  3

=> ((ref 0) := 1)
=> (Ptr(2):{0} := 1)
∴  ()

=> (let x : <int> = (ref 1) in ((!x) + 1))
=> (let x : <int> = Ptr(3):{1} in ((!x) + 1))
=> ((!Ptr(3):{1}) + 1)
=> (1 + 1)
∴  2

=> (let x : <int> = (ref 1) in ((x := 3); ((!x) + 1)))
=> (let x : <int> = Ptr(4):{1} in ((x := 3); ((!x) + 1)))
=> ((Ptr(4):{1} := 3); ((!Ptr(4):{1}) + 1))
=> ((); ((!Ptr(4):{3}) + 1))
=> ((!Ptr(4):{3}) + 1)
=> (3 + 1)
∴  4

=> (let x : <int> = (ref 1) in ((x := 3); ((x := ((!x) + 1)); (!x))))
=> (let x : <int> = Ptr(5):{1} in ((x := 3); ((x := ((!x) + 1)); (!x))))
=> ((Ptr(5):{1} := 3); ((Ptr(5):{1} := ((!Ptr(5):{1}) + 1)); (!Ptr(5):{1})))
=> ((); ((Ptr(5):{3} := ((!Ptr(5):{3}) + 1)); (!Ptr(5):{3})))
=> ((Ptr(5):{3} := ((!Ptr(5):{3}) + 1)); (!Ptr(5):{3}))
=> ((Ptr(5):{3} := (3 + 1)); (!Ptr(5):{3}))
=> ((Ptr(5):{3} := 4); (!Ptr(5):{3}))
=> ((); (!Ptr(5):{4}))
=> (!Ptr(5):{4})
∴  4

=> (let x : <int> = (ref 6) in (let y : <int> = (ref 3) in ((y := ((!x) * (!y))); ((!x) + (!y)))))
=> (let x : <int> = Ptr(6):{6} in (let y : <int> = (ref 3) in ((y := ((!x) * (!y))); ((!x) + (!y)))))
=> (let y : <int> = (ref 3) in ((y := ((!Ptr(6):{6}) * (!y))); ((!Ptr(6):{6}) + (!y))))
=> (let y : <int> = Ptr(7):{3} in ((y := ((!Ptr(6):{6}) * (!y))); ((!Ptr(6):{6}) + (!y))))
=> ((Ptr(7):{3} := ((!Ptr(6):{6}) * (!Ptr(7):{3}))); ((!Ptr(6):{6}) + (!Ptr(7):{3})))
=> ((Ptr(7):{3} := (6 * (!Ptr(7):{3}))); ((!Ptr(6):{6}) + (!Ptr(7):{3})))
=> ((Ptr(7):{3} := (6 * 3)); ((!Ptr(6):{6}) + (!Ptr(7):{3})))
=> ((Ptr(7):{3} := 18); ((!Ptr(6):{6}) + (!Ptr(7):{3})))
=> ((); ((!Ptr(6):{6}) + (!Ptr(7):{18})))
=> ((!Ptr(6):{6}) + (!Ptr(7):{18}))
=> (6 + (!Ptr(7):{18}))
=> (6 + 18)
∴  24

=> (let x : <int> = (ref 0) in (while ((!x) < 4) do (x := ((!x) + 1)) end))
=> (let x : <int> = Ptr(8):{0} in (while ((!x) < 4) do (x := ((!x) + 1)) end))
=> (while ((!Ptr(8):{0}) < 4) do (Ptr(8):{0} := ((!Ptr(8):{0}) + 1)) end)
=> ((Ptr(8):{0} := ((!Ptr(8):{0}) + 1)); (while ((!Ptr(8):{0}) < 4) do (Ptr(8):{0} := ((!Ptr(8):{0}) + 1)) end))
=> ((Ptr(8):{0} := (0 + 1)); (while ((!Ptr(8):{0}) < 4) do (Ptr(8):{0} := ((!Ptr(8):{0}) + 1)) end))
=> ((Ptr(8):{0} := 1); (while ((!Ptr(8):{0}) < 4) do (Ptr(8):{0} := ((!Ptr(8):{0}) + 1)) end))
=> ((); (while ((!Ptr(8):{1}) < 4) do (Ptr(8):{1} := ((!Ptr(8):{1}) + 1)) end))
=> (while ((!Ptr(8):{1}) < 4) do (Ptr(8):{1} := ((!Ptr(8):{1}) + 1)) end)
=> ((Ptr(8):{1} := ((!Ptr(8):{1}) + 1)); (while ((!Ptr(8):{1}) < 4) do (Ptr(8):{1} := ((!Ptr(8):{1}) + 1)) end))
=> ((Ptr(8):{1} := (1 + 1)); (while ((!Ptr(8):{1}) < 4) do (Ptr(8):{1} := ((!Ptr(8):{1}) + 1)) end))
=> ((Ptr(8):{1} := 2); (while ((!Ptr(8):{1}) < 4) do (Ptr(8):{1} := ((!Ptr(8):{1}) + 1)) end))
=> ((); (while ((!Ptr(8):{2}) < 4) do (Ptr(8):{2} := ((!Ptr(8):{2}) + 1)) end))
=> (while ((!Ptr(8):{2}) < 4) do (Ptr(8):{2} := ((!Ptr(8):{2}) + 1)) end)
=> ((Ptr(8):{2} := ((!Ptr(8):{2}) + 1)); (while ((!Ptr(8):{2}) < 4) do (Ptr(8):{2} := ((!Ptr(8):{2}) + 1)) end))
=> ((Ptr(8):{2} := (2 + 1)); (while ((!Ptr(8):{2}) < 4) do (Ptr(8):{2} := ((!Ptr(8):{2}) + 1)) end))
=> ((Ptr(8):{2} := 3); (while ((!Ptr(8):{2}) < 4) do (Ptr(8):{2} := ((!Ptr(8):{2}) + 1)) end))
=> ((); (while ((!Ptr(8):{3}) < 4) do (Ptr(8):{3} := ((!Ptr(8):{3}) + 1)) end))
=> (while ((!Ptr(8):{3}) < 4) do (Ptr(8):{3} := ((!Ptr(8):{3}) + 1)) end)
=> ((Ptr(8):{3} := ((!Ptr(8):{3}) + 1)); (while ((!Ptr(8):{3}) < 4) do (Ptr(8):{3} := ((!Ptr(8):{3}) + 1)) end))
=> ((Ptr(8):{3} := (3 + 1)); (while ((!Ptr(8):{3}) < 4) do (Ptr(8):{3} := ((!Ptr(8):{3}) + 1)) end))
=> ((Ptr(8):{3} := 4); (while ((!Ptr(8):{3}) < 4) do (Ptr(8):{3} := ((!Ptr(8):{3}) + 1)) end))
=> ((); (while ((!Ptr(8):{4}) < 4) do (Ptr(8):{4} := ((!Ptr(8):{4}) + 1)) end))
=> (while ((!Ptr(8):{4}) < 4) do (Ptr(8):{4} := ((!Ptr(8):{4}) + 1)) end)
∴  ()

=> (let n : int = 10 in (let x : array<int> = (new int[n]) in (let y : <int> = (ref 0) in ((while ((!y) < n) do ((x[(!y)] := ((!y) * (!y))); (y := ((!y) + 1))) end); x))))
=> (let x : array<int> = (new int[10]) in (let y : <int> = (ref 0) in ((while ((!y) < 10) do ((x[(!y)] := ((!y) * (!y))); (y := ((!y) + 1))) end); x)))
=> (let x : array<int> = [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}] in (let y : <int> = (ref 0) in ((while ((!y) < 10) do ((x[(!y)] := ((!y) * (!y))); (y := ((!y) + 1))) end); x)))
=> (let y : <int> = (ref 0) in ((while ((!y) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!y)] := ((!y) * (!y))); (y := ((!y) + 1))) end); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}]))
=> (let y : <int> = Ptr(19):{0} in ((while ((!y) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!y)] := ((!y) * (!y))); (y := ((!y) + 1))) end); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}]))
=> ((while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][0] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(9):{()} := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(9):{()} := (0 * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(9):{()} := (0 * 0)); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(9):{()} := 0); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{()}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{0} := ((!Ptr(19):{0}) + 1)); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{0} := (0 + 1)); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{0} := 1); (while ((!Ptr(19):{0}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{0})] := ((!Ptr(19):{0}) * (!Ptr(19):{0}))); (Ptr(19):{0} := ((!Ptr(19):{0}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][1] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(10):{()} := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(10):{()} := (1 * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(10):{()} := (1 * 1)); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(10):{()} := 1); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{()}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{1} := ((!Ptr(19):{1}) + 1)); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{1} := (1 + 1)); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{1} := 2); (while ((!Ptr(19):{1}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{1})] := ((!Ptr(19):{1}) * (!Ptr(19):{1}))); (Ptr(19):{1} := ((!Ptr(19):{1}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][2] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(11):{()} := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(11):{()} := (2 * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(11):{()} := (2 * 2)); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(11):{()} := 4); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{()}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{2} := ((!Ptr(19):{2}) + 1)); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{2} := (2 + 1)); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{2} := 3); (while ((!Ptr(19):{2}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{2})] := ((!Ptr(19):{2}) * (!Ptr(19):{2}))); (Ptr(19):{2} := ((!Ptr(19):{2}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][3] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(12):{()} := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(12):{()} := (3 * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(12):{()} := (3 * 3)); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(12):{()} := 9); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{()}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{3} := ((!Ptr(19):{3}) + 1)); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{3} := (3 + 1)); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{3} := 4); (while ((!Ptr(19):{3}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{3})] := ((!Ptr(19):{3}) * (!Ptr(19):{3}))); (Ptr(19):{3} := ((!Ptr(19):{3}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][4] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(13):{()} := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(13):{()} := (4 * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(13):{()} := (4 * 4)); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(13):{()} := 16); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{()}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{4} := ((!Ptr(19):{4}) + 1)); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{4} := (4 + 1)); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{4} := 5); (while ((!Ptr(19):{4}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{4})] := ((!Ptr(19):{4}) * (!Ptr(19):{4}))); (Ptr(19):{4} := ((!Ptr(19):{4}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][5] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(14):{()} := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(14):{()} := (5 * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(14):{()} := (5 * 5)); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(14):{()} := 25); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{()}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{5} := ((!Ptr(19):{5}) + 1)); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{5} := (5 + 1)); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{5} := 6); (while ((!Ptr(19):{5}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{5})] := ((!Ptr(19):{5}) * (!Ptr(19):{5}))); (Ptr(19):{5} := ((!Ptr(19):{5}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][6] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(15):{()} := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(15):{()} := (6 * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(15):{()} := (6 * 6)); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(15):{()} := 36); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{()}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{6} := ((!Ptr(19):{6}) + 1)); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{6} := (6 + 1)); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{6} := 7); (while ((!Ptr(19):{6}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{6})] := ((!Ptr(19):{6}) * (!Ptr(19):{6}))); (Ptr(19):{6} := ((!Ptr(19):{6}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][7] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(16):{()} := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(16):{()} := (7 * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(16):{()} := (7 * 7)); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(16):{()} := 49); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{()}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{7} := ((!Ptr(19):{7}) + 1)); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{7} := (7 + 1)); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> (((Ptr(19):{7} := 8); (while ((!Ptr(19):{7}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{7})] := ((!Ptr(19):{7}) * (!Ptr(19):{7}))); (Ptr(19):{7} := ((!Ptr(19):{7}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][8] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(17):{()} := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(17):{()} := (8 * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(17):{()} := (8 * 8)); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((Ptr(17):{()} := 64); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{()}, Ptr(18):{()}])
=> ((((); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> (((Ptr(19):{8} := ((!Ptr(19):{8}) + 1)); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> (((Ptr(19):{8} := (8 + 1)); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> (((Ptr(19):{8} := 9); (while ((!Ptr(19):{8}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{8})] := ((!Ptr(19):{8}) * (!Ptr(19):{8}))); (Ptr(19):{8} := ((!Ptr(19):{8}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> (((); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> ((while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> (((([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][9] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> ((((Ptr(18):{()} := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> ((((Ptr(18):{()} := (9 * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> ((((Ptr(18):{()} := (9 * 9)); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> ((((Ptr(18):{()} := 81); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{()}])
=> ((((); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
=> (((Ptr(19):{9} := ((!Ptr(19):{9}) + 1)); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
=> (((Ptr(19):{9} := (9 + 1)); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
=> (((Ptr(19):{9} := 10); (while ((!Ptr(19):{9}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}][(!Ptr(19):{9})] := ((!Ptr(19):{9}) * (!Ptr(19):{9}))); (Ptr(19):{9} := ((!Ptr(19):{9}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
=> (((); (while ((!Ptr(19):{10}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}][(!Ptr(19):{10})] := ((!Ptr(19):{10}) * (!Ptr(19):{10}))); (Ptr(19):{10} := ((!Ptr(19):{10}) + 1))) end)); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
=> ((while ((!Ptr(19):{10}) < 10) do (([Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}][(!Ptr(19):{10})] := ((!Ptr(19):{10}) * (!Ptr(19):{10}))); (Ptr(19):{10} := ((!Ptr(19):{10}) + 1))) end); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
=> ((); [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}])
∴  [Ptr(9):{0}, Ptr(10):{1}, Ptr(11):{4}, Ptr(12):{9}, Ptr(13):{16}, Ptr(14):{25}, Ptr(15):{36}, Ptr(16):{49}, Ptr(17):{64}, Ptr(18):{81}]

=> (0b100110 + 4.6)
=> (38 + 4.6)
∴  42.6

=> (0b100 << 2)
=> (4 << 2)
∴  16

=> (0b100 >> 2)
=> (4 >> 2)
∴  1

=> (4 << 2)
∴  16

=> (0b10101010 land 0b1010101)
=> (170 land 0b1010101)
=> (170 land 85)
∴  0

=> (0b10101010 lor 0b1010101)
=> (170 lor 0b1010101)
=> (170 lor 85)
∴  255

=> (0b11110000 lxor 0b11111111)
=> (240 lxor 0b11111111)
=> (240 lxor 255)
∴  15

=> (0b11110000 lxor 255)
=> (240 lxor 255)
∴  15

